
* the c program language
重读此书, 于:<2016-03-22 Tue 23:39>


** main() variable list enclosed with (), () empty brace means no variable need.

*** 符号常量
#+BEGIN_SRC c
#define name replaceContent
#+END_SRC
程序中所有用到name的部分在预处理时被replaceContent替换

*** EOF(end of file)在 stdio.h 中定义

*** 数组
#+BEGIN_SRC c
int array[arraySize];
#+END_SRC
数组下标从0开始，可以是任何 *整数* 表达式，变量或常量

*** 函数
#+BEGIN_SRC c
void funcName (variable list); // 函数说明
void funcName (variable list) { // 函数定义
    // function body
    说明序列
    语句序列
}
#+END_SRC
不同函数的定义可以以任意次序出现在一个源文件或多个源文件中。
同一函数不能分开存放在几个文件中。

*** 返回值
一般返回值为0表示正常，非0表示异常

*** 变量作用域
自动变量作用域为当前函数
外部变量需在所有函数外定义，且只能定义一次。定义的目的是为之分类存储单元。
使用 *extern* 表示引用的是外部变量，不分配存储单元。
*extern* 省略的原则是外部变量在当前文件中定义。
如果外部变量在其他源文件中定义，当前文件中不能省略 *extern*

** 类型、运算符及表达式

*** <limits.h> <float.h> 包含了所有类型的符号常量及机器与编译程序的其他性质

*** 常量
以 *l/L* 结尾的是 *long* 常量
以 *ul/UL* 结尾的是 *unsigned long* 常量
以 *f/F* 结尾的是 *float* 常量


*** 自动转换
自动转换把比较窄的类型转换为比较宽的类型
<ctype.h> 定义了用于字符集测试和转换的工具

*** 自增自减运算符(++n n++ --n n--)只能用于变量，不能用于表达式

*** 位运算只能作用于整数分量(char, short, int, long)的有/无符号类型
 & 按位与(AND)
 | 按位或(OR)
 ^ 按位异或(XOR)
 << 左移
 >> 右移
 ~ 取反

*** 赋值运算，赋值表达式
i = i + 1; // = 是赋值表达式
i += 1;    // += 是赋值运算符

x *= y + 1; == x = x *(y+1)

*** 条件表达式
表达式1?表达式2:表达式3
表达式1不等于0(真)，则计算表达式2，并以该值作为条件表达式的值
否则计算表达式3，并以该值作为表达式的值

*** 运算符优先级
1. () [] ->
2. !非 ~取反 ++自增 --自减 +正数 -负数 *指针解引用 &取地址 (type)类型转换 sizeof
3. * / %
4. + -
5. << >>
6. < <= > >=
7. == !=
8. &
9. ^
10. |
11. &&
12. ||
13. ?:
14. = += -= *= ... 赋值运算符
15. 


** 控制语句

*** switch
switch(表达式): {
case 常量表达式: 语句序列
case 常量表达式: 语句序列
case 常量表达式: 语句序列
default: 语句序列
}
表达式和常量表达式必须都是 *整数值*


** 函数
*** 默认的返回值
如果函数定义中省略了返回值，默认是int

*** stdlib.h
atof atoi 函数在此文件中定义

*** 外部变量
所有通过名字对外部变量或函数的引用都是引用的同一个对象(称为外部连接)

*** 逆波兰表达式
(1+2) * (3+4) 的逆波兰表示式为: 1 2 + 3 4 + *

*** 寄存器变量
register int 10; 建议编译器把变量放入寄存器，可能被忽略

*** 初始化
外部变量: 未显式初始化的外边两和静态变量都被初始化为0(编译器干的)
自动变量和寄存器变量: 随机值

*** 宏
#define 定义宏
#undef 取消定义宏

#if !define 条件包含
#endif


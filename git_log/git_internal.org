
* git internal <2016-03-29 周二 11:19>

** understanding git
git is a content tracker, it tracks content - files and directories.
It is at its heart a collection of simple tools that implement a tree history STORAGE AND DIRECTORY CONTENT MANAGEMENT SYSTEM.
GIT更像一个文件系统，它追踪目录及文件的变化
#+BEGIN_QUOTE
in many ways you can just see git as a filesystem - it's content-addressable, and it has a notion of versioning, but i really really disigned it coming at the problem from the viewpoint of a filesystem person (hey, kernels is what i do), and i actually have absolutely zero interest in creating a traditional scm system -- linus
#+END_QUOTE

most scms store a new version of a project with code delta or diff.

git stores a new version of a project, it stores a new tree - a bunch of blobs of content and a collection of pointers that can be expanded back out into a full directory of files and subdirectories.

if you want a diff between two versions, it doesn't add up all the deltas, it simply looks at the two trees and runs a new diff on them.


大多数SCMS保存新版本时，保存代码的变化部分；GIT保存一棵新的树，包含新版本的文件的内容和一些文件的指针。当需要比较版本时，直接读出不同版本的文件，并运行DIFF返回结果。

这是GIT进行分布式开发更容易的基础。合并一系列复杂的变化对它来说不是问题，可直接返回特定版本的所有内容，不需要进行代码变化的合并。

there are a number of areas that the developers of git, including and especially linus, have focused on in conceiving(conceive v. 构想 设想 想象 构思 怀孕) and building git.

there may be a lot of things that git is not good at, but these things are what git is very good at.

+ non-linear developement
  git is optimized for cheap and efficient branching and merging.
  git is built to be worked on simultaneously by many people, having myltiple branches developed by individual developers, being merged, branched and re-merged constantly. because of this, branching is incredibly cheap and merging is incredibly easy.

+ distributed development
  git is built to make distributed development simple. no repository is special or central in git -each clone is basically equal and could generally replace any other on at any time. it works completely offline or with hundreds of remote repositories that can push to and/or fetch from each other over several simple and standard protocols.

+ efficiency
  git is very efficient. most operations are local, which reduces unnecessary network overhead. repositories are generally packed very efficiently, which often leads to surprisingly small repo sizes.

  git also is efficient in its network operations - the common git transfer protocols transfer only packed versions of only the ojbects that have changed. it alson won't try to transfer content twice, so if you have the same file under two different names, it will only transfer the content once.


** A TOOLKIT DESIGN
git is designed as a toolkit that can be combined and chained to do new and interesting things.
the tools can be more or less divided into two major camps, often refered to as the porcelain and the plumbing.

+ porcelain (porcelain n. 瓷 瓷器; adj. 脆的 易碎的 精美的 瓷的)
  the user-oriented interfaces to do scm type things - hiding the low-level fun.

+ plumbing (plumbing n. 建筑物的管路系统，水暖工的工作，管道 水管设施; v. plumb 的分词)
  to do simple things flexibly and are combined by programs and scripts into porcelain programs.


** GIT OBJECT TYPES
git objects are the actual data of git, the main thing that the repository is made up of. there are four main object types in git, the first three being the most important to really understand the main functions of git.

Git的对象用于存储提交的数据, repository实际是由Git对象构成的. Git共有4种类型的对象,理解前三种对象可以帮助我们领会Git的工作原理.

all of these types of objects are stored in the git *object database*, which is kept in the *git directory*. each object is compressed (with zlib) and referenced by the sha-1 value of its contents plus a small header.

Git将对象存储在repository的目录下名为 *.git* 目录中, 我们称其为 *Object Database*. 每个对象都使用zlib压缩存储,并使用其sha-1值作为标识.

#+begin_quote
  ./              | *tree*: 1a738d
  -> test.cpp     | *blob*: a874b7
  -> README.md    | *blob*: a906cb
  -> lib/         | *tree*: fe8971
     -> test.lib  | *blob*: a0a60a
                    *commit*: a11bef
#+end_quote

+ THE Blob

  In Git, the contents of files are stored as *blobs*.
  It is important to note that it is the contents that are stored, not the files. The names and modes of the files are not stored with the blob, just the contents.
  This means that if you have two files anywhere in your project that are exactly the same, even if they have different names, Git will only store the blob once. This also means that during repository transfers, such as clones or fetches, Git will only transfer the blob once, then expand it out into multiple files upon checkout.

  Git将文件的内容存储为Blob对象.
  谨记Blob只保存文件的内容，文件的名字和属性并没有保存在Blob对象中.
  如果有两个内容相同的文件，即使他们的文件名不同，所在位置不同，Git只保存一份文件内容的Blob数据在仓库里. 当需要使用时，将他们从Blob中解开, 生成对应的文件。

+ The Tree

  Dictories in Git basically correspend to *trees*.
  A tree is a simple list of trees and blobs that the tree contains, along whit the names and modes of those trees and blobs. The contents section of a tree object consists of a very simple text file that lists the mode, type, name and sha of each entry.

  Git使用 *tree* 对象存储目录(表示)
  tree包含其目录下的其他目录tree及文件的blob信息,包含他们的name和mode(以及指向对应blob的指针).

+ The Commit

  So, now that we can store arbitrary trees of content in Git, where does the 'history' part of 'tree history storage system' come in? The answer is the *commit* object.
  The commit is very simple, much like the tree, It simply points to a tree and keeps an author, committer, message and any parent commits that directly preceded it.

  commit很简单，它和tree相似. commit保存一个tree，同时包含了提交者, 提交注释和直接与其关联的commit(父commit, 即提交前的当前版本commitID)
  通常情况下一个commit只有一个parent commit，如果当前版本是从其他分支merge过来的, 则可能出现多个parent commit的信息.

+ The Tag

  *Tag* is the final type of object you will find in a Git database. This is an object that provides a permanent shorthand name for a particular commit. It contains an object, type, tag, tagger and a message. Normally the type is *commit* and the object is the SHA-1 of the commit you're tagging. The tag can also be GPG signed, providing cryptographic integrity to a release or version.

  Tag是最后一个Git对象类型，他是特定commit的持久的引用, 包含commit的信息(commit SHA-1 signature), tag(标签名称), message(标签的描述)及打标签的用户信息.


** The Git Data Model
Git objects are immutable - they cannot ever be changed. Reference can constantly change. They are simple pointers to a particular object.

Examples of references are *branchs* and *remotes*.
A branch in Git is nothing more than a file in the *.git/refs/heads/* directory that contains the SHA-1 of the most recent commit of that branch. To branch that line of development, all Git does is create a new file in that directory that points to the same SHA-1. As you continue to commit, one of the branches will keep changing to point to the new commit SHA-1s, while the other one can stay where it was.

Git对象都是不可变的, Git引用类型是存储着指向不可变对象指针的对象, 随着指向内容的变化而改变.

引用类型的例子是 *branch(分支)* 和 *remotes(外部源)*
Branch对象保存在 *.git/refs/heads/* 目录下. 保存着指向此分支最后一个commit的指针(SHA-1标示). 当在此分支上不断提交时, 当前branch的commit指针指向最后一次commit, 其他没有变化(branch名字等).


*** The Model
The basic data model I've been explaining looks something like this:
#+begin_quote
                     HEAD
                      |
          remote   branch   tag
               \      |      /
                    commit(loop)
                      |
                     tree(loop)
                     /|\
                     blob
#+end_quote
The cheap reference I've represented as HEAD, remote & branch.
The immutable objects are the tag, commit, tree & blob.

在Git的数据模型中, HEAD, remote, branch 是引用类型, blob, tree, commit及tag是对象类型.

HEAD file points to the branch we're currently on, that help Git know which commit will be the parent for the next commit.

HEAD 相当于 branch, 始终指向当前 repository 的最后一次 commit. 

当提交时, 新的commit被创建
+ commit的parent指向当前HEAD对应的commit
+ 被改变的文件的blob被记录到它对应得tree下(新的tree), 包含此tree的tree也发生了变化(新的tree), 不变的tree不变
+ 如果此时我们创建tag, tag指向当前commit


*** Traversal


* Git commands

** basic command
*** creating an initial reposotory
**** git init
将当前目录初始化为Git Repository的根根目录，创建一个空的仓库

*** adding a file to your repository
**** git add fileName
将指定的文件或目录加入Git仓库，如果是目录，则会递归添加目录下所有内容(包含文件及所有子目录)

**** git commit -m "commit comment"
将当前由 *git add* 增加的内容保存到本地版本.


**** git branch & merge


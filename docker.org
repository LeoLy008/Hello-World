


* docker 学习 <2016-04-07 Thu 21:02>

** docker的优势
同为虚拟化方案,docker相对与VM,不需要虚拟OS部分,直接使用LXC在OS层上对资源进行隔离,建立虚拟环境.
docker与VM相比,在
+ 启动时间
+ 磁盘使用
+ 性能
+ 单系统支持量
上占极大的优势
docker可以提供:
+ 更快的交付和部署
+ 更高效的虚拟化
+ 更轻松的迁移和扩展
+ 更简单的管理

** docker基本概念
docker有三个基本概念
+ 镜像(Image)
+ 容器(Container)
+ 仓库(Repository)


*** 镜像(Image)
Image是一个只读的模板,用于创建Container
举例来说,Image就是一个Container运行的环境,如OS

*** 容器(Container)
Container用来运行应用
Container是从镜像创建的运行的实例.
Container可以被启动,开始,停止,删除.
每个Container都是相互隔离的,独立的平台

Container是Image的运行实例,实在Image上创建的独立层

*** 仓库(Repository)
Repository是集中存放Image的地方.
Repository Registry Server(仓库注册服务器)存放多个仓库,
每个仓库包含多个镜像,
每个镜像可包含多个标签
仓库可以是Public或Private

docker repository类似与git repository

** 安装docker
按照docker.com上的教程即可

测试安装结果
#+begin_src, bash
$ docker run hello-world 
docker: Cannot connect to the Docker daemon. Is the docker daemon running on this host?.
See 'docker run --help'.
# 提示 docker daemon 没有运行

# 检查docker服务是否启动
$ sudo service docker status
docker stop/waiting

# 启动docker服务
$ sudo service docker start
docker start/running, process 7580

# 也可以使用以下命令启动 docker daemon, 临时启动daemon,可以在控制台看到日志
$ sudo docker daemon
INFO[0000] Graph migration to content-addressability took 0.00 seconds 
INFO[0000] Firewalld running: false                     
INFO[0000] Default bridge (docker0) is assigned with an IP address 172.17.0.0/16. Daemon option --bip can be used to set a preferred IP address 
WARN[0000] Your kernel does not support swap memory limit. 
INFO[0000] Loading containers: start.                   
.
INFO[0000] Loading containers: done.                    
INFO[0000] Daemon has completed initialization          
INFO[0000] Docker daemon                                 commit=20f81dd execdriver=native-0.2 graphdriver=aufs version=1.10.3
INFO[0000] API listen on /var/run/docker.sock           

#+end_src


** 镜像 Images

*** 获取镜像
#+begin_src, bash
$ docker pull imageName  # 从官方获取镜像

$ docker pull repositoryRegisterServer/imageName  # 从指定的仓库注册服务获取镜像

#+end_src

*** 列出本地镜像

#+begin_src, bash
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello-world         latest              690ed74de00f        5 months ago        960 B

#+end_src

*** 创建镜像

#+begin_src, bash
$ docker run -t -i training/sinatra /bin/bash
root@containerInstantID:/#
root@containerInstantID:/# apt-get install python
root@containerInstantID:/# exit
$ docker commit -m "added python" -a "Docker Newbee" containerInstanceID ouruser/sinatra:v2
return_the_identitfy_of_new_image
$ docker images
$ docker run -t -i 
#+end_src
1. 首先使用特定镜像启动容器
2. 启动的容器会有个实例ID,记下containerInstantID
3. 在容器内做环境配置,如安装软件之类的(安装python),之后使用exit退出
4. 使用 *docker commit* 提交更新后的副本,需要有Docker Hub帐号,打标签
5. 可以在本地看列出我们的新镜像了


**** 利用 Dockerfile 创建镜像
使用 docker commit 创建镜像简单,但不利于在团队中分享.
使用 docker build 和 Dockerfile 来创建心镜像,易于分享

***** 创建一个 Dockerfile
#+begin_quote, Dockerfile
# This is a comment
FROM ubuntu:14.04
MAINTAINER Docker Newbee <newbee@docker.com>
RUN apt-get -qq update
RUN apt-get -qqy install ruby ruby-dev
RUN gem install sinatra
# put my local web site in myApp folder to /var/www
ADD myApp /var/www
# expose httpd port
EXPOSE 80
# run command after Container start
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]
#+end_quote

Dockerfile 一般分为4个部分
1. 基础镜像信息
2. 维护者信息
3. 镜像操作指令
4. 容器启动时执行的指令

Dockerfile的语法为:
+ *#* 开始的行为注释
+ *FROM* 指令表明基础镜像, *FROM <image>:<tag>*
+ *MAINTAINER* 紧接着维护者信息(userName email) *MAINTAINER <name> <email>*
+ *RUN* 开头的指令会在创建中运行,通常是安装原件之类的 *RUN <command>* 或 *RUN ["command", "param1", "param2"]*
+ *ADD <src> <dest>* 命令复制本地文件到镜像, src可以是相对于 Dockerfile的相对路径,URL或tar包(会自动解压)
+ *COPY <src> <dest>* 复制本地主机的src到容器的dest,同 *ADD* 如果使用本地目录为src,推荐使用
+ *EXPOSE* 向外部开放端口, *EXPOSE <port> [<port>...]*
  + 启动容器时,可以通过-P参数指定,docker主机会自动分配一个端口转发到指定端口
+ *ENV <key> <value>* 指定环境变量,可悲后续 *RUN* 指令使用,容器启动后也有效
+ *CMD* 命令描述容器启动后运行的程序, 一个容器只能执行一条命令,如果制定了多条,执行最后一条.如果用户在启动容器时指定了命令,则不执行 *CMD*
  + *CMD ["executable", "param1", "param2"]* 使用 exec 执行命令
  + *CMD command param1 param2* 在/bin/sh 中执行,需要交互的应用
  + *CMD ["param1", "param2"]* 提供给 *ENTRYPOINT* 的默认参数
+ *ENTRYPOINT ["executable", "param1", "param2"]* 指定容器启动后执行的命令,不会被docker启动命令覆盖
  + 只能执行一个 *ENTRYPOINT* 指定多个时执行最后一个
  + *ENTRYPOINT command param1 param2* 在shell中执行
+ *VOLUMN ["/data"]* 创建一个可以从本地主机或其他溶剂挂载的挂载点,一般用来存放需要持久保存的数据
+ *USER daemon* 指定容器运行时的用户名或UID,后续的RUN会使用被指定的用户
+ *WORKDIR /path/to/workdir* 为后续的 *RUN* *CMD* *ENTRYPOINT* 指令配置工作目录
+ *ONBUILD [INSTRUCTION]* 如果所创建的镜像作为其他镜像的基础镜像,执行的操作指令.等价与在新的镜像的Dockerfile中增加指令. *INSTRCUTION* 可以是以上的任意命令

*RUN*每操作一步,会创建一个临时的镜像,下一步操作完成时,前一步的临时镜像被删除
不能超过127层(最多128个RUN指令)
所以尽量减少 *RUN* 的数量,使用脚本运行命令或将命令放在一个 *RUN* 内运行


***** 使用 docker build 生成镜像
#+begin_src, bash
$ docker build -t="ouruser/sinatra:v2"

#+end_src

*** 修改镜像标签
docker tag ImageID repository:tag

*** 导入本地镜像文件
*cat image.file | docker import - ubuntu:14.04*
*docker import image.file ubuntu:14.04-python3.4*
将本地文件 *image.file* 倒入本地镜像库, 仓库名为 ubuntu, 标签为14.04

*** 上传镜像
*docker push ouruser/sinatra*
将本地镜像上传至服务器 user/repository 下

*** 导出本地镜像至文件
*docker save -o localfileName repository:tag*

*** 倒入本地镜像
*docker load --input localfile*
*docker load < localfile*

*** 移除本地镜像
*docker rmi image*
要移除Image,首先要移除依赖他的所有container

*** 移除本地容器
*docker rm container*

*** 清理未打标签的Image
*docker rmi $(docker images -q -f "dangling=true")*
*docker rmi $(docer images --quiet --filter "dangling=true")* 
dangling是dangle的分词形式,表示"吊着,悬挂着,尾随"


** 容器 Container
容器是独立运行的一个或一组应用,及他们的运行环境.

*** 启动
启动有两种形式
+ 基于一个Image新建一个Container并启动
+ 将处于终止状态的Container重新启动


**** 新建启动
*docker run repository:tag CMD_to_run* 指令

*docker run -t -i ubuntu:14.04 /bin/bash* 启动容器,启动/bin/bash并容许交互

*-t* 要求docker分配伪终端,并绑定到docker的标准输入输出

*-i* 要求docker的标准输入保持打开

使用docker run命令时,docker在后台会做的操作有:
+ 检查本地镜像是否存在,不存在则下载
+ 利用镜像创建容器
+ 分配一个文件系统,并在只读的文件系统外再挂载一层可读写层
+ 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中
+ 从地址池配置一个IP地址给容器
+ 执行用户指定的命令
+ 执行完后终止容器

**** 启动已终止的容器
*docker start*

*** 后台运行
*docker run -d ubuntu:14.04 /bin/sh -c "while true; do echo hello world; sleep 5"; done;* 
*-d* 使container运行在后台,不会将结果输出到控制台,可以通过 *docker logs* 查看输出
使用 *-d* 启动后会返回一个唯一ID, 可通过 *docker ps* 查看容器信息
*docker logs [containerID or names]* 查看输出

*** 终止容器
使用 *docker stop [containerID or names]* 来终止运行中的容器
容器指定的命令终结时,容器也会自动退出.
终止状态的容器可以用 *docker ps -a* 来查看


*** 进入容器
使用 *-d* 运行的容器可以再以交互方式运行

**** attach 命令
*docker attach name/containerID* 进入container


**** nsenter 命令
可能需要安装,是util-linux包2.23版本后的命令 **
nsenter可以访问另一个进程的名字空间.需要root权限


*** 导入和导出容器

**** 导出容器
可以使用 *docker export containerID > file.tar* 将container导出到文件

**** 导入快照
使用 
*docker import --input file repository:tag*
*cat ubuntu.tar | docker import - repository:tag*
将容器导入为Image
*docker load* 用于导入Image, 包含元数据
*docker import* 用于导入Container, 不包含元数据


*** 删除容器
*docker rm*
*docker rm $(docker ps -a -q)* 删除所有处于 *-a* (终止)状态的Container
其实是删除所有容器,但是 *docker rm* 不会删除运行中的Container,所以...


** 仓库 Repository
Docker Hub 是默认的仓库注册服务器

*** 登陆
*docker login* 登陆 Docker Hub 并将信息保存在 .dockercfg 中

*** 基本操作
**** 查找官方镜像
*docker search key*

**** 下载镜像
*docker pull*

**** 自动创建
自动创建指用户通过 Docker Hub 指定跟踪一个目标网站上的项目,一旦项目更新,则自动执行创建镜像工作
自动创建包含如下操作:
+ 登陆Docker Hub
+ 在目标网站链接到 Docker Hub
+ 在 Docker Hub 中配置一个自动创建
+ 选取目标网站的项目,需要包含Dockerfile和分支
+ 指定Dockerfile的位置,提交



*** 私有仓库
可以使用 *docker-registry* 工具创建私有仓库

**** 安装 docker-registry
*docker run -d -p 5000:5000 registry*
使用官方的 registry 镜像来启动本地私有仓库.
指定本地的配置文件
*docker run -d -p 5000:5000 -v /home/user/registry-conf:/registry-conf -e DOCKER_REGISTRY_CONFIG=/registry-conf/config.yml registry*
默认情况下,仓库被创建在容器的 */tmp/registry* 下,
通过 *-v* 将镜像存放在被地的指定路径下,如下
*docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry*

**** TODO 本地安装 <2016-04-08 Fri 00:13>

**** TODO 配置 <2016-04-08 Fri 00:13>


** Docker 数据管理
如何在Docker内部及容器见管理数据,容器中管理数据主要有两种方式:
+ 数据卷 (Data volumes)
+ 数据卷容器 (Data volume containers)


*** 数据卷 (Data volumnes)
数据卷是一个可供一个或多个容器使用的特殊目录,它绕过UFS,提供:
+ 可在容器间共享和重用
+ 对数据卷的修改立即生效
+ 对数据卷的更新,不影响Image
+ 数据卷默认一直存在,即使Container被删除

数据卷的使用类似与Linux下对目录或文件的mount,Image中原有的指定的挂载点被隐藏.

**** 创建数据卷
*docker run -v <localMountPoint> <dockerMountPoint>[:privilege]*
*docker run -v <localMountPoint>:<dockerMountPoint>*
可以在 Dockerfile 中使用 *VOLUME* 命令管理数据卷
[:privilege]指定docker对数据卷的权限,可以是 *ro* 或没有,默认是 *rw*

**** 删除数据卷
*docker rm -v* 删除无主数据卷

**** 查看数据卷的具体信息
*docker inspect containerName/ID*
输出的 "Volumns" 部分是数据卷的信息


*** 数据卷容器
如果被更新的数据需要在容器间共享,最好创建数据卷容器
他和容器类似,只是专门用来存储数据
*docker run -d -v /dbdata --name dbdata training/postgres echo Data-only container for postgres*
*--name containerName* 指定Container的名字
之后在其他容器中使用 *--volumes-from* 来加载数据卷容器 dbdata
*docker run -d --volumes-from dbdata --name db1 training/postgres*
*docker run -d --volumes-from dbdata --name db2 training/postgres*
也可以级连的方式从其他容器挂载数据卷容器
*docker run -d --name db3 --volumes-from db1 training/postgres*
从容器db1挂载数据卷容器(挂载的还是dbdata)
被挂载的数据卷容器不需要处于运行状态

如果删除数据卷容器,必须使用 *docker rm -v* 且所有挂在他的容器已经被删除


*** 数据卷容器的备份,恢复
使用 -v 挂在本地数据卷并将数据卷容器的内容拷贝出来
*docker run --volumes-from dbdata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata*
+ 将当前目录挂载到/backup上
+ 挂载数据卷容器dbdata,路径为/dbdata
+ 执行 *tar cvf /backup/backup.tar /dbdata* 将/dbdata目录打包保存到/backup/目录下


**** 恢复
*docker run -d --name dbdata2 -v /dbdata2 ubuntu /bin/bash*
创建新的数据卷容器
*docker run --volumes-from dbdata2 -v $(pwd):/backup ubuntu cd /dbdata2; tar xvf /backup/backup.tar*


** Docker 的网络功能
Docker 允许
+ 通过外部访问容器
+ 容器互联的方式提供网络服务


*** 外部访问容器
让外部访问容器的应用,可以通过 *-P* 或 *-p* 参数来指定端口映射

**** -P 选项随机映射
使用 *-P* 时, Docker 会随机映射一个 *49000~49900* 的端口到内部容器开放的网络端口
(宿主机器49000~49900的端口对应Docker内应用的特定端口)

使用 *docker ps -l* 可以看到运行Container的情况

也可以通过 *docker logs* 查看应用的信息


**** -p 选项指定映射
*-p* 可以指定要映射的端口,指定的端口可以绑定一个容器,格式有
+ *ip:hostPort:containerPort* 绑定到主机的指定端口
+ *ip::containerPort* 随机绑定到主机的端口
+ *hostPort:containerPort* 默认绑定所有端口
+ *...containerPort/protocol* 指定绑定的协议类型, 支持 udp/tcp

*-p* 参数可以多次使用,效果叠加

使用 *docker port containerID/Name* 查看特定容器的网络映射

使用 *docker inspect containerID/Name|Image* 查看容器/镜像的详情(啥都有)


***** 映射所有接口地址
使用 hostPort:containerPort 格式本地的5000端口映射到容器的5000端口
#+begin_src, bash
$ docker run -d -p 5000:5000 ubuntu tornado start
#+end_src
此时默认会绑定本地所有接口上的所有地址


*** 容器互联
容器的连接系统是端口映射外,另一种跟容器中应用交互的方式.

该系统会在源和接收容器之间创建一个隧道,接收容器可以看到源容器指定的信息

**** 自定义容器命名
连接使用容器的名字来标识.在启动容器时,给容器提供一个唯一的名字标识
#+begin_src, bash
$ docker run --rm --name containerName repository command
#+end_src
*--name myName* 在启动容器时为其命名,否则名字是随机的
*--rm* 标记告诉docker在容器终止后自动删除, 此选项和 *-d* 选项不能同时使用


**** 容器互联
使用 *--link* 参数让容器之间互联
#+begin_src, bash
# 首先创建一个数据库容器
$ docker run -d --name mysqlDB mysql

# 创建一个web容器
$ docker run -d -P --name web --link mysqlDB:db python tornado start

#+end_src
连接选项的格式是 *--link name:alias*
+ *name* 是连接的容器名字
+ *:alias* 指定连接的别名

此时web容器可以方位mysqlDB容器的内容, mysqlDB容器名字多了个web/db, 是web容器连接使用的别名

mysqlDB 容器没有使用 *-p/P* 参数暴露端口,因此只有web容器可以访问它


Docker通过2种方式为容器公开连接信息:
+ 环境变量
+ 更新 */etc/hosts* 文件
使用 *env* 命令来产看 web 容器的环境变量
#+begin_src, bash
$ docker run --rm --name web2 --link mysqlDB:db python env
...
DB_NAME=/web2/db
DB_PORT=tcp://172/17.0.5:5432
DB_PORT_5000_TCP=tcp://172.17.0.5:5432
DB_PORT_5000_TCP_PROTO=tcp
DB_PORT_5000_TCP_PORT=5432
DB_PORT_5000_TCP_ADDR=172.17.0.5
...

#+end_src
以 *DB_* 开头的环境变量是供web容器连接db容器使用,前缀采用大些的连接别名


除了环境变量, Docker还添加host信息到副容器的 */etc/hosts* 文件, web容器的hosts文件
#+begin_quote, /etc/hosts
172.17.0.7    aed84ee21bde
...
172.17.0.5    db
#+end_quote
这里有2个hosts,
+ 172.17.0.7 是web容器的IP, web容器的ID作为他的主机名
+ 127.17.0.5 是db容器的IP, db作为主机名


** 高级网络配置
Docker在启动时,会自动在主机上创建一个 *docker0* 虚拟网桥,实际是Linux的一个bridge,可以理解为一个 *软交换机*. 它会在挂载到它的网口之间进行转发.

同时, Docker随机分配一个本地未占用的私有网段中的一个地址给 *docker0* 接口.比如 172.17.42.1, 子网掩码为 255.255.0.0. 此后启动的容器内的汪口也会自动分配一个同网段(172.17.0.0/16)的地址.

当创建Container时,会同时创建一对 *veth pair* 接口(相当于管道). 这对接口一端在容器内, 即 *eth0*; 另一端在本地并被挂载到 *docker0* 网桥, 名字以 *veth* 开头 (例如 *vethAQI2QT*). 通过这种方式,主机可以和容器通信,容器之间也可以相互通信.

*** 快速配置指南
一下是Docker网络相关的命令列表

有些命令只有在 Docker 服务启动时才能配置
+ *-b BRIDGE* or *--bridge=BRIDGE* 指定容器挂载的网桥
+ *--bip=CIDR* 指定 docker0 的子网掩码
+ *-H SOCKET...* or *--host=SOCKET...* Docker服务端接收命令的通道
+ *--icc=true|false* 是否支持容器之间进行通信
+ *--ip-forward=true|false*
+ *--iptables=true|false* 禁止Docker添加iptables规则
+ *--mtu=BYTES* 容器网络中的MTU


下面2命令可在Docker服务启动是配置,也可通过 *docker run* 配置.
Docker服务启动时配置,则作为所有容器的默认配置
*docker run* 配置,覆盖默认配置,对启动的Container有效
+ *--dns=IP_ADDRESS...* 使用指定的DNS服务器
+ *--dns-search=DOMAIN...* 指定DNS搜索域


最有这些只有在 *docker run* 执行时使用,只针对Container的特性
+ *-h HOSTNAME* or *--hostname=HOSTNAME* 配置容器的主机名
+ *--link=ContainerName:Alias* 添加到达另一个容器的连接
+ *--net=bridge|none|container:Name_or_ID|host* 配置容器的桥接模式
+ *-p SPEC* or *--publish=SPEC* 映射容器的端口到宿主主机
+ *-P* or *--publish-all=true|false* 映射容器所有端口到宿主主机


*** 配置DNS
Docker利用虚拟文件来关在到容器的配置文件,来配置容器的主机名和DNS配置

容器内使用 *mount* 查看挂载信息
#+begin_src, bash
$ mount
...
/dev/disk/by-uuid/ifec...ebdf on /etc/hostname type ext4 ...
/dev/disk/by-uuid/ifec...ebdf on /etc/hosts type ext4 ...
tmpfs on /etc/resolv.conf type tmpfs ...
...
#+end_src

这种机制使得 *宿主主机的DNS* 信息发生变化后,所有Docker容器的DNS配置通过 */etc/resolv.conf* 文件立即得到更新.

如果用户需要手动指定容器的配置, 可以使用如下选项
+ *-h HOSTNAME* *--hostname=HOSTNAME* 设定容器的主机名,他会修改容器 /etc/hostaname 和 /etc/hosts, 但容器外不可见. *docker ps* 也不可见
+ *--link=ContainerName:Alias* 添加其他容器的主机名到 /etc/hosts 中,实现连接到其他容器的途径
+ *--dns=IP_ADDRESS* 添加DNS服务器到容器的 /etc/resolv.conf 中,让容器用这个解析所有不在 /etc/hosts 中的主机名
+ *--dns-search=DOMAIN* 设定容器的搜索域, 当设定为 example.com 时,在搜索host主机时,DNS不仅搜索host,还会搜索host.example.com


*** 容器访问控制
主要通过 *iptables* 防火墙来进行管理和实现.


**** 容器访问外部网络
容器想要访问外部网络,需要本地系统的转发支持
#+begin_src, bash
$ sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 1
# 如果为 *0* 说明没有开启,需要手动开启

$ sysctl -w net.ipv4.ip_forward=1
#+end_src

可以在启动Docker服务时设定 *--ip-forward=true*, Docker会自动设定系统的 *ip_forward* 参数为 *1*


**** 容器间的访问
容器间访问需要两方面支持
+ 容器的网络拓扑是否互联. 默认同主机的容器都连接至 docker0 网桥
+ 本地系统的防火墙是否容许通过 *iptables* 设置


**** 访问所有端口
当启动 Docker 服务时,默认会添加一条转发策略到iptables的FORWARD链上.
策略为通过 (ACCEPT) 还是禁止(DROP)取决与配置 *--icc=true|false*.
如果手动指定了 *--iptables=false* 则不会添加 iptables 规则.


**** 访问指定端口
通过 *-icc=false* 关闭网络访问后,可以通过 *--link=ContainerName:Alias* 来访问容器的开放端口.

使用 *--iptables=true* 否则无法添加互联规则(默认是DROP)
当使用 *--link=ContainerName:Alias* 时,主机的 iptables 增加规则
#+begin_src, iptables
# 添加 --link=ContainerName:Alias 前的宿主主机 iptables
$ sudo iptables -nL
...
Chain FORWARD (policy ACCEPT)
target        prot   opt   source            destination        
DROP          all    ---   0.0.0.0/0         0.0.0.0/0

# 添加容器连接
$ docker run -d --link=mysqlDB:db --name python /bin/bash

# 添加容器连接后的宿主主机 iptables
$ sudo iptables -nL
...
Chain FORWARD (policy ACCEPT)
target        prot   opt   source            destination        
ACCEPT        tcp    ---   172.17.0.2        172.17.0.3         tcp spt:80
ACCEPT        tcp    ---   172.17.0.3        172.17.0.2         tcp spt:80
DROP          all    ---   0.0.0.0/0         0.0.0.0/0
#+end_src


*** 端口映射的实现
默认情况下,容器可以主动访问到外部网络的连接,但外部网络无法访问容器
(容器访问外部网络需要宿主开启 net.ipv4.ip_forward)

**** 容器访问外部网络的实现
容器所有到外部网络的连接,源地址都会被NET成本地系统的IP地址.这是使用 *iptables* 的源地址伪装操作实现的.

查看主机的NAT规则
#+begin_src, bash
$ sudo iptables -t nat -nL
...
Chain POSTROUTING (policy ACCEPT)
target         prot   opt   source                   destination
MASQUERADE     all    ---   172.17.0.0/16            !172.17.0.0/16
...
#+end_src
masquerade n.伪装;化妆舞会;假面舞会 v.冒充

上述规则将所有源地址在 172.17.0.0/16 网段,目的地址为其他网段的流量动态伪装为从系统网卡发出.
MASQUERADE跟传统对比SNAT的好处是它能攻台从网卡获取地址.


**** 外部访问容器的实现
外部访问容器,需要在容器启动是使用 *-p/P* 参数来启动.

无论使用哪中方式,其实实在宿主主机的 *iptables* 的NAT标中添加相应的规则.


#+begin_src, bash
# 使用 *-P* 时, 随机映射到宿主端口
$ iptabels -t nat -nL
...
Chain DOCKER (2 reference)
target       prot   opt   source              destination
DNAT         tcp    ---   0.0.0.0/0           0.0.0.0/0         tcp dpt:49153 to:172.17.0.2:80


# 使用 *-p 80:80* 时, 指定映射端口
$ iptabels -t nat -nL
...
Chain DOCKER (2 reference)
target       prot   opt   source              destination
DNAT         tcp    ---   0.0.0.0/0           0.0.0.0/0         tcp dpt:80 to:172.17.0.2:80

#+end_src

+ 这里的规则 0.0.0.0, 表示接受主机来自所有接口的流量.用户可以通过 -p IP:hostPort:containerPort 或 -p IP::containerPort 来指定允许访问容器的主机上的IP,接口. 以制定更严格的规则
  + IP表示能访问容器的IP地址, 默认是全部(0.0.0.0/0)
  + hostPort 表示宿主主机的端口, 默认是随机
  + containerPort 表示容器的端口
+ 如果希望永久绑定到某个固定的IP地址,可以在Docker的配置文件 */etc/default/docker* 中指定 *DOCKER_OPT="--ip=IP_ADDRESS"*, 重启Docker服务后生效



*** 配置 docker0 网桥
Docker 服务会默认创建一个 docker0 网桥,它在内核层连通了其他的物理或虚拟网卡.

Docker默认制定了 docker0 接口的IP地址和子网掩码, 让主机和容器之间可以通过网桥互相通信, 它还制定了 MTU (默认 1500bytes),或宿主主机网络路由上支持的默认值. 也可以在启动是配置
+ *--bip=CIDR* IP地址和子网掩码格式, 如 192.168.1.5/24
+ *--mtu-BYTES* MTU 配置

也可以在配置文件中使用 *DOCKER_OPTS* 配置, 然后重启服务.

Docker使用Linux网桥, 用户可以使用 *brctl show* 来查看网桥和端口的连接信息.

#+begin_src, bash
$ sudo brctl show
bridge name          bridge id                STP enabled        interfaces
docker0              8000.3a1djk918239        no                 vethbb678db
#+end_src

brctl 是 bridge-utils 中的命令

每次启动容器, Docker从可用地址段中选择一个空闲的IP地址分配给容器的eth0端口.
使用本地主机上的docker0接口的IP作为容器的默认网关

#+begin_src, bash
$ docker run -ti --name ubuntu ubuntu

root@e18479da0674:/# ip addr show eth0
36: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.3/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:3/64 scope link 
       valid_lft forever preferred_lft forever

root@e18479da0674:/# ip route
default via 172.17.0.1 dev eth0 
172.17.0.0/16 dev eth0  proto kernel  scope link  src 172.17.0.3 

root@e18479da0674:/# exit

#+end_src


*** 自定义网桥
除了默认网桥docker0, 可以自己制定网桥来连接各个容器

在启动 docker 服务时, 使用 *-b BRIDGE* 或 *--bridge=BRIDGE* 来指定网桥

如果服务已经启动,需要先停止服务,删除旧的网桥
#+begin_src, bash
# 停止Docker服务, 停止网桥docker0, 删除网桥 docker0
$ sudo service docker stop
$ sudo ip link set dev docker0 down
$ sudo brctl delbr docker0

# 创建网桥 bridge0
$ sudo brctl addbr bridge0
$ sudo ip addr add 192.168.5.1/24 dev bridge0
$ sudo ip link set dev bridge0 up

# 检查创建的网桥
$ ip addr show bridge0



# 配置Docker服务, 启动Docker服务
$ echo 'DOCKER_OPTS="-b=bridge0"' >> /etc/default/docker
$ sudo service docker start

#+end_src


** Docker 底层实现
Docker底层的核心技术包括 Linux 上的
+ 名字空间 (Namespaces) :: 系统资源的隔离
  名字空间分为
  + pid 名字空间 :: 进程隔离
  + net 名字空间 :: 网络隔离,每个netns有独立的网络设备,ip,route table, /proc/net目录
  + ipc 名字空间 :: 进程间通信隔离
  + mnt 名字空间 :: 文件子系统隔离
  + uts 名字空间 :: 主机名和域名隔离
  + user 名字空间 :: 用户隔离
+ 控制组 (Control Group) :: 资源限制管理审计. 可以对内存,CPU,磁盘IO等资源进行限制
+ Union文件系统 (Union file systems) :: 分层文件系统,支持对文件系统的修改作为一次提交来一层层的叠加,同时可以将不同目录挂载到同一个虚拟文件系统下. Docker Image 及 Container 采用AUFS(AnotherUnionFS)方式制作. 它允许为每一个成员目录设定为只读,读写和写出权限,同时支持分层概念.
+ 容器格式 (Container format)


*** 基本架构
Docker是 C/S 架构. 
Docker服务是服务端,处理来自客户端的请求.
客户端可以运行在同一主机上或其他主机上(通过socket或RESTful API来通信)

Docker服务端在宿主主机运行客户端发来的命令